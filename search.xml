<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6基础</title>
    <url>/archives/de91195f.html</url>
    <content><![CDATA[<h2 id="一、声明变量"><a href="#一、声明变量" class="headerlink" title="一、声明变量"></a>一、声明变量</h2><h3 id="1-let"><a href="#1-let" class="headerlink" title="1. let"></a>1. let</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> a,b,c;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>, b = <span class="number">200</span>, c = <span class="number">300</span>;</span><br></pre></td></tr></table></figure>

<p>let与var的区别：</p>
<ol>
<li>var 可重复声明，let不能，声明同一变量两次会报错</li>
<li>let在块级作用域中声明的变量只能在代码块中有效，不能在全局中使用，而var可以。</li>
<li>let不存在变量提升，不能先定义再赋值。</li>
</ol>
<p><code>注意</code>: let虽然是在块级作用域中有效，但并不影响作用域链。</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    funciton fn () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="comment">// hello</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-const"><a href="#2-const" class="headerlink" title="2. const"></a>2. const</h3><p>const用于声明常量，一般常量大写，而且在块级作用域中声明的也一样不能在全局中使用，常量初始赋值后不能在进行修改，但在对对象和数组的元素进行修改时，不算是对常量的修改，例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> STUDENTS = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>];</span><br><span class="line">STUDENTS.push(<span class="string">&#x27;xiaoming&#x27;</span>);</span><br><span class="line"><span class="comment">//由于此时常量的地址值未发生改变，还是那个数组，所以不会报错</span></span><br></pre></td></tr></table></figure>



<h2 id="二、解构赋值"><a href="#二、解构赋值" class="headerlink" title="二、解构赋值"></a>二、解构赋值</h2><p>允许按照一定模式从数组和对象中提取值，对变量进行赋值，这就是结构赋值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> STUDENTS = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [ni, wo, ta] = STUDENTS;</span><br><span class="line"><span class="built_in">console</span>.log(ni);</span><br><span class="line"><span class="built_in">console</span>.log(wo);</span><br><span class="line"><span class="built_in">console</span>.log(ta);</span><br><span class="line"><span class="comment">// zhangsan lisi wangwu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">const</span> zhang = &#123;</span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="string">&quot;不详&quot;</span>,</span><br><span class="line">    hobbies: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;喜欢写代码&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name, age, hobbies&#125; = zhang;</span><br><span class="line"><span class="built_in">console</span>.log(name) <span class="comment">//张三</span></span><br><span class="line"><span class="built_in">console</span>.log(age) <span class="comment">//不详</span></span><br><span class="line"><span class="built_in">console</span>.log(hobbies) <span class="comment">//function（）&#123;console.log((&#x27;喜欢写代码&#x27;))&#125;</span></span><br><span class="line">hobbies(); <span class="comment">//喜欢写代码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="三、模板字符串"><a href="#三、模板字符串" class="headerlink" title="三、模板字符串"></a>三、模板字符串</h2><p>使用模板字符串可以支持换行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">				&lt;li&gt;hello&lt;/li&gt;</span></span><br><span class="line"><span class="string">				&lt;li&gt;world&lt;/li&gt;</span></span><br><span class="line"><span class="string">			&lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure>

<p>用于变量拼接：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`张三`</span>；</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;str&#125;</span>是一名程序员`</span></span><br></pre></td></tr></table></figure>



<h2 id="四、对象的简写"><a href="#四、对象的简写" class="headerlink" title="四、对象的简写"></a>四、对象的简写</h2><p>ES6允许在大括号里面，直接写入变量和函数，作为对象的属性和方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>；</span><br><span class="line"><span class="keyword">let</span> hobbies = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;lol&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> student = &#123;</span><br><span class="line">    name,</span><br><span class="line">    hobbies</span><br><span class="line">    <span class="function"><span class="title">improve</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">//函数简写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="五、箭头函数"><a href="#五、箭头函数" class="headerlink" title="五、箭头函数"></a>五、箭头函数</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>ES6使用箭头函数来 定义函数</p>
<p><del>let fn = funciton () {}</del></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-区别"><a href="#2-区别" class="headerlink" title="2. 区别"></a>2. 区别</h3><ol>
<li>this是静态的，始终指向函数声明时所在作用域的下的this值。</li>
<li>不能作为构造函数化对象</li>
<li>不能使用arguments变量</li>
<li>当形参只有一个时，可以省略小括号；当只有一条语句时，可以省略花括号和return，此时执行结果就是函数的返回值</li>
</ol>
<h3 id="3-实践"><a href="#3-实践" class="headerlink" title="3. 实践"></a>3. 实践</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从数组中返回偶数的元素</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> res = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"><span class="comment">//[2,8]</span></span><br></pre></td></tr></table></figure>



<h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h3><ol>
<li>箭头函数适合于跟 <code>this</code> 无关的的回调：定时器、数组的方法回调等。</li>
<li>不适合与this有关的回调：dom事件回调、对象方法</li>
</ol>
<h2 id="六、给函数形参赋初始值"><a href="#六、给函数形参赋初始值" class="headerlink" title="六、给函数形参赋初始值"></a>六、给函数形参赋初始值</h2><p>ES6可以给函数形参赋初始值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">a,b,c=<span class="number">10</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = fn(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// 15</span></span><br></pre></td></tr></table></figure>



<p>与解构赋值相结合：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span> (<span class="params">&#123;host = <span class="string">&quot;127.0.0.1&quot;</span>, username, password, port&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(host) <span class="comment">//127.0.0.1</span></span><br><span class="line">    <span class="built_in">console</span>.log(username) <span class="comment">//zhangsan</span></span><br><span class="line">    <span class="built_in">console</span>.log(password) <span class="comment">//root</span></span><br><span class="line">    <span class="built_in">console</span>.log(port) <span class="comment">//8080</span></span><br><span class="line">&#125;</span><br><span class="line">connect(&#123;</span><br><span class="line">    username: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    password: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    port: <span class="number">8080</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="七、rest参数"><a href="#七、rest参数" class="headerlink" title="七、rest参数"></a>七、rest参数</h2><p>ES5中获取函数实参的方式是通过arguments来返回一个对象，而rest参数获取实参返回的是一个数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(args)</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>注意： rest参数必须放到最后</p>
<h2 id="八、扩展运算符-…"><a href="#八、扩展运算符-…" class="headerlink" title="八、扩展运算符 …"></a>八、扩展运算符 …</h2><p>扩展运算符的作用可以看作是与rest参数作用相反，将一个数组分割成一个个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line">fn(...arr);</span><br><span class="line"><span class="comment">//0: &quot;zhangsan&quot;</span></span><br><span class="line"><span class="comment">//1: &quot;lisi&quot;</span></span><br><span class="line"><span class="comment">//2: &quot;wangwu&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-应用"><a href="#1-应用" class="headerlink" title="1. 应用"></a>1. 应用</h3><h4 id="1-1-合并数组"><a href="#1-1-合并数组" class="headerlink" title="1.1 合并数组"></a>1.1 合并数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wnagwu&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="string">&#x27;ni&#x27;</span>, <span class="string">&#x27;wo&#x27;</span>, <span class="string">&#x27;ta&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> res = [...arr, ...arr1];</span><br></pre></td></tr></table></figure>



<h4 id="1-2-克隆数组"><a href="#1-2-克隆数组" class="headerlink" title="1.2 克隆数组"></a>1.2 克隆数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wnagwu&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> clone = [...arr];</span><br></pre></td></tr></table></figure>



<h4 id="1-3-将伪数组转换为真数组"><a href="#1-3-将伪数组转换为真数组" class="headerlink" title="1.3 将伪数组转换为真数组"></a>1.3 将伪数组转换为真数组</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br></pre></td></tr></table></figure>



<h2 id="九、Symbol"><a href="#九、Symbol" class="headerlink" title="九、Symbol"></a>九、Symbol</h2><p>ES6中引入了新的原始数据类型Symbol，表示独一无二的值，是js的第七种数据类型，是一种类似于字符串的数据类型。</p>
<h3 id="1-特点"><a href="#1-特点" class="headerlink" title="1. 特点"></a>1. 特点</h3><ol>
<li>Symbol的值是唯一的，用来解决命名冲突的问题。</li>
<li>Symbol值不能与其他数据进行运算</li>
<li>Symbol定义的对象属性不能使用 <code>for...in</code> 进行循环遍历，但是可以使用 <code>Reflect.ownKeys</code> 来获取对象的所有键名。</li>
</ol>
<h3 id="2-创建"><a href="#2-创建" class="headerlink" title="2. 创建"></a>2. 创建</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建1</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(); <span class="comment">//通过函数创建</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> b1 = Symobol(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b === b1); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建2 通过函数对象创建</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> d = <span class="built_in">Symbol</span>.for(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c === d); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>



<h3 id="3-应用"><a href="#3-应用" class="headerlink" title="3. 应用"></a>3. 应用</h3><p>向对象中添加方法：当一个对象里面的结构较为复杂时，不便于我们查找，而直接添加会产生一定的风险，因为不能确保添加的方法属性名是否存在该对象中，所以用Symbol添加方法会简单有效和安全。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> game = &#123;</span><br><span class="line">    name: <span class="string">&quot;DNF&quot;</span>,</span><br><span class="line">    up:	funciton () &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">&#x27;上移&#x27;</span>)；</span><br><span class="line">	&#125;,</span><br><span class="line">    down: funciton () &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">&#x27;下移&#x27;</span>)；</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> methods = &#123;</span><br><span class="line">    up: <span class="built_in">Symbol</span>(),</span><br><span class="line">    down: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line">game[methods.up] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">game[methods.down] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>另一种添加方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">		<span class="keyword">let</span> say = <span class="built_in">Symbol</span>();</span><br><span class="line">        <span class="keyword">let</span> cj = <span class="built_in">Symbol</span>();</span><br><span class="line">        <span class="keyword">let</span> game = &#123;</span><br><span class="line">            name: <span class="string">&quot;lol&quot;</span>,</span><br><span class="line">            [say]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;开语音&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            [cj]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;刷野&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">        game[say]();</span><br><span class="line">        game[cj]();</span><br></pre></td></tr></table></figure>



<h2 id="十、迭代器-Iterator"><a href="#十、迭代器-Iterator" class="headerlink" title="十、迭代器(Iterator)"></a>十、迭代器(Iterator)</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>迭代器是一种接口，为各种不同的数据结构提供统一的访问机制，任何数据结构只要部署<code>Iterator</code>,就可以完成遍历操作。</p>
<p>ES6创建了一种新的遍历命令<code>for ...of</code>循环，Iterator接口主要供其消费。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> students = [<span class="string">&#x27;zhangsan&#x27;</span>, <span class="string">&#x27;lisi&#x27;</span>, <span class="string">&#x27;wangwu&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> students) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h3><ol>
<li>创建一个指针对象，指向当前数据结构的起始位置</li>
<li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li>
<li>若不断调用next方法，指针会一直后移直至最后一个成员</li>
<li>每调用一个next方法就会返回一个包含 <code>value</code> 和<code>done</code>属性的对象</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = students[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure>



<h3 id="3-应用-1"><a href="#3-应用-1" class="headerlink" title="3. 应用"></a>3. 应用</h3><p>自定义遍历数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    name: <span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">    hobbies: [</span><br><span class="line">        <span class="string">&quot;打篮球&quot;</span>,</span><br><span class="line">        <span class="string">&quot;健身&quot;</span>,</span><br><span class="line">        <span class="string">&quot;lol&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; <span class="built_in">this</span>.hobbies.length) &#123;</span><br><span class="line">                    <span class="keyword">const</span> result = &#123; <span class="attr">value</span>: <span class="built_in">this</span>.hobbies[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                    index++;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   	<span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i <span class="keyword">of</span> user</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十一、生成器"><a href="#十一、生成器" class="headerlink" title="十一、生成器"></a>十一、生成器</h2><h3 id="1-介绍-1"><a href="#1-介绍-1" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>生成器其实就是一个特殊的函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>; <span class="comment">//yield相当于分隔符，两个分成三块，通过调用迭代器的next方法让函数执行分三步走</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">222</span>);    </span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">333</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(); <span class="comment">//可以传参</span></span><br><span class="line">iterator.next(); <span class="comment">// 111 next里也可以传实参 </span></span><br><span class="line">iterator.next(); <span class="comment">//222</span></span><br><span class="line">iterator.next(); <span class="comment">//333</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">let</span> i <span class="keyword">of</span> gen()</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">//返回yield后面表达式或自变量结果的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>next第一次调用返还的的整体传参的值，第二次则为第一个yield语句整体返回的结果。</p>
<h3 id="2-实例1"><a href="#2-实例1" class="headerlink" title="2. 实例1"></a>2. 实例1</h3><p>1s后输出111，2s后输出222，3s后输出333</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">222</span>);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log();</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> one();</span><br><span class="line">    <span class="keyword">yield</span> two();</span><br><span class="line">    <span class="keyword">yield</span> three();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure>



<h3 id="3-实例2"><a href="#3-实例2" class="headerlink" title="3. 实例2"></a>3. 实例2</h3><p>模拟获取用户数据、订单数据和商品数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUsers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">      iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrders</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">      iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGoods</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeo	ut(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">      iterator.next(data);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">yield</span> getUsers();</span><br><span class="line">    <span class="built_in">console</span>.log(users);</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">yield</span> getOrders();</span><br><span class="line">    <span class="built_in">console</span>.log(orders);</span><br><span class="line">    <span class="keyword">let</span> goods = <span class="keyword">yield</span> getGoods();</span><br><span class="line">    <span class="built_in">console</span>.log(goods)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>在node中使用promise：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个promise实例对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	fs.readFile(<span class="string">&#x27;path&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            reject(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			resolve(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">p1</span><br><span class="line">	.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;读取文件失败&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//调用时then可以链式调用</span></span><br></pre></td></tr></table></figure>

<!-- more -->

<h3 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">res,rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        reject(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//catch相当于then方法里只有一个err参数</span></span><br></pre></td></tr></table></figure>



<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>ES6提供了新的数据结构<code>Set集合</code>，它类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可使用扩展运算符和 <code>for...of</code> 进行遍历。</p>
<h3 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]); <span class="comment">//集合里元素会自动去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="built_in">console</span>.log(s.size);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">s.add();</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">s.delete();</span><br><span class="line"></span><br><span class="line"><span class="comment">//检测</span></span><br><span class="line"><span class="built_in">console</span>.log(s.has(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空集合</span></span><br><span class="line">s.clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//for...of遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">// [2,3,1,5,8,9]</span></span><br></pre></td></tr></table></figure>



<h4 id="求交集"><a href="#求交集" class="headerlink" title="求交集"></a>求交集</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">itme</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(arr1).has(item));</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure>



<h4 id="求并集"><a href="#求并集" class="headerlink" title="求并集"></a>求并集</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> union = [...new <span class="built_in">Set</span>([...arr, ...arr1])];</span><br><span class="line"><span class="built_in">console</span>.log(union);</span><br></pre></td></tr></table></figure>



<h4 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">itme</span> =&gt;</span> !(<span class="keyword">new</span> <span class="built_in">Set</span>(arr1).has(item)));</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//2 8 9</span></span><br></pre></td></tr></table></figure>



<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>ES6笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB基础</title>
    <url>/archives/d69f1e.html</url>
    <content><![CDATA[<h2 id="MongoDB基本介绍"><a href="#MongoDB基本介绍" class="headerlink" title="MongoDB基本介绍"></a>MongoDB基本介绍</h2><h2 id="一、MongoDB基本介绍"><a href="#一、MongoDB基本介绍" class="headerlink" title="一、MongoDB基本介绍"></a>一、MongoDB基本介绍</h2><p>MongoDB是一种非关系型数据库，相对关系型数据库来说比较灵活，其实它也可以算是介于关系型数据库和非关系型数据库之间的一种数据库，因为它是最像关系型数据库的非关系数据库，它支持的数据结构十分松散，是类似json的 <code>bson</code>格式。</p>
<h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h3><p>在 <a href="https://www.mongodb.com/try">官网</a> 导航栏上找到software，选择第一个免费的社区版下载安装，安装完成后要配置环境变量，路径是在其文件的<code>Bin</code> 目录。</p>
<a id="more"></a>

<h3 id="2-启动数据库"><a href="#2-启动数据库" class="headerlink" title="2. 启动数据库"></a>2. 启动数据库</h3><p>要启动数据库，必须要在安装其盘符的根目录下打开cmd，输入 <code>mongod</code> 即可，最后有<code>Waiting for </code></p>
<p><code>connections</code>出现就证明数据库已启动，然后连接该数据库只需打开任意路径下的cmd输入 <code>mongo</code> 就可以连接成功。</p>
<h2 id="二、MongoDB基本语法"><a href="#二、MongoDB基本语法" class="headerlink" title="二、MongoDB基本语法"></a>二、MongoDB基本语法</h2><p>首先介绍下该数据库的基本组成，每个数据库由 <code>集合</code> 组成，而集合里又放着<code>文档</code>，示意图如下：</p>
 <img src="/images/shiyitu.png">



<h3 id="1-常用shell指令"><a href="#1-常用shell指令" class="headerlink" title="1. 常用shell指令"></a>1. 常用shell指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">show dbs //显示所有数据库</span><br><span class="line"></span><br><span class="line">use 数据库名 //进入指定的数据库 注意：即使没有该数据库，由于MongoDB的灵活性，依然可以进入但不会创建</span><br><span class="line"></span><br><span class="line">db //显示当前所处的数据库</span><br><span class="line"></span><br><span class="line">show collections //显示当前数据库的所有集合</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-CRUD-增删改查"><a href="#2-CRUD-增删改查" class="headerlink" title="2. CRUD(增删改查)"></a>2. CRUD(增删改查)</h3><h4 id="2-1-增加文档"><a href="#2-1-增加文档" class="headerlink" title="2.1 增加文档"></a>2.1 增加文档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.insert(doc) // 中间是集合名称 集合会隐式创建</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.insertOne(doc) //插入单个文档</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.insertMany([]) //插入多个文档</span><br></pre></td></tr></table></figure>

<p>其中 <code>insert()</code>里如果传的是一个对象，那么功能与insertOne是一致的，同理，传一个数组，数组里存储着多个对象，那么就与insertMany相同，因为inset()方法是较早版本所出，所以兼容性较好。 </p>
<h4 id="2-2-查询文档"><a href="#2-2-查询文档" class="headerlink" title="2.2 查询文档"></a>2.2 查询文档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.find() //查询所有文档，返回类型为数组</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.find().limit(number) //查询指定数量的文档</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.find().count() //统计文档数量</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.findOne() //查询符合条件的单个文档，返回类型为对象</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.findMany() //查询符合条件的多个文档</span><br></pre></td></tr></table></figure>



<p><code>find()</code> 方法和上面用法一致，既可以查询单个也可以查询多个文档，若没有参数传入，则直接查询该集合内的</p>
<p>所有文档。</p>
<h4 id="2-3-修改文档"><a href="#2-3-修改文档" class="headerlink" title="2.3 修改文档"></a>2.3 修改文档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.update(&#123;目标文档&#125;, &#123;更改内容&#125;) //该方法修改后的文档会覆盖修改前</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.update(&#123;目标文档&#125;, &#123;$set: &#123;更改内容&#125;&#125;) //该方法只会修改指定的文档属性,没有的属性会自动添加</span><br><span class="line">db.&lt;collections&gt;.update(&#123;目标文档&#125;, &#123;$unset: &#123;更改内容&#125;) //删除指定属性的文档</span><br><span class="line"></span><br><span class="line">//update()默认修改单个文档，若想修改多个，只需在后面加入一个对象</span><br><span class="line">(&#123;目标文档&#125;, &#123;$set: &#123;更改内容&#125;, &#123;multi: true&#125;)</span><br></pre></td></tr></table></figure>



<p>与之前一样，也存在<code>updateOne()</code>和<code>updateMany()</code> 。</p>
<h4 id="2-4-删除文档"><a href="#2-4-删除文档" class="headerlink" title="2.4 删除文档"></a>2.4 删除文档</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.remove(&#123;&#125;) //默认删除所有符合条件的文档 删除单个需传递第二个参数true</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.drop() //remove方法性能较差，删除速度较慢，而drop直接清空</span><br><span class="line">db.&lt;collections&gt;.deleteOne()</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.deleteMany()</span><br></pre></td></tr></table></figure>



<p>remove({})里必须 <font color="red">传参</font>，否则报错。</p>
<h4 id="2-5-补充"><a href="#2-5-补充" class="headerlink" title="2.5 补充"></a>2.5 补充</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.replace(&#123;旧&#125;, &#123;新&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="三、可视化工具"><a href="#三、可视化工具" class="headerlink" title="三、可视化工具"></a>三、可视化工具</h2><p>MongoDB的可视化工具有很多，如NoSql、自带的Compass等，里面只是样式发生改变，功能大致相同，需要的话可以自行下载安装。</p>
<h2 id="四、内嵌式文档"><a href="#四、内嵌式文档" class="headerlink" title="四、内嵌式文档"></a>四、内嵌式文档</h2><h3 id="1-创建内嵌式文档"><a href="#1-创建内嵌式文档" class="headerlink" title="1. 创建内嵌式文档"></a>1. 创建内嵌式文档</h3><p>有时文档一个属性值也可能有多个多个属性，这是该属性值可以是一个文档，也就是文档里内嵌一个文档，则该文档被称为 <strong>内嵌式文档</strong> ，例如我们先创建一个内嵌式文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.insert(&#123;</span><br><span class="line">	name: &quot;张三&quot;,</span><br><span class="line">	gender: &quot;男&quot;,</span><br><span class="line">	age: 18,</span><br><span class="line">	hobbies: &#123;</span><br><span class="line">		sports: [&quot;打篮球&quot;, &quot;跑步&quot;, &quot;健身&quot;]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>此时，该文档里 <code>hobbies</code> 属性值为一个文档，那么插入的这个文档就是内嵌式文档。</p>
<h3 id="2-查找内嵌式文档"><a href="#2-查找内嵌式文档" class="headerlink" title="2. 查找内嵌式文档"></a>2. 查找内嵌式文档</h3><p>根据内嵌的文档来查找该文档：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.find(&#123;&quot;hobbies.sports&quot;: &quot;打篮球&quot;&#125;) //hobbies.sports必须加引号</span><br></pre></td></tr></table></figure>



<h3 id="3-向内嵌式文档数组添加新的值"><a href="#3-向内嵌式文档数组添加新的值" class="headerlink" title="3. 向内嵌式文档数组添加新的值"></a>3. 向内嵌式文档数组添加新的值</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.update(&#123;name: &quot;张三&quot;&#125;, &#123;$push: &#123;&quot;hobbies.sports&quot;: &quot;打篮球&quot;&#125;&#125;)</span><br><span class="line">//push添加的值在原数组中可以存在</span><br><span class="line"></span><br><span class="line">db.&lt;collections&gt;.update(&#123;name: &quot;张三&quot;&#125;, &#123;$addToSet:&#123;&quot;hobbies.sports&quot;: &quot;踢足球&quot;&#125;&#125;)</span><br><span class="line">//adToSet只能添加原数组不存在的值</span><br></pre></td></tr></table></figure>



<h2 id="五、操作大数额的集合"><a href="#五、操作大数额的集合" class="headerlink" title="五、操作大数额的集合"></a>五、操作大数额的集合</h2><p>通常数据库存储的数据都是成千上万的，面对庞大的数据，操作就不能局限于单个数据的方法。</p>
<h3 id="1-添加文档"><a href="#1-添加文档" class="headerlink" title="1. 添加文档"></a>1. 添加文档</h3><p>在往集合添加文档的时候，有时添加的数额很大，此时为了提高效率，就要用到<strong>for循环</strong>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">var arr = []</span><br><span class="line">for (var i = 0; i&lt;20000; i++) &#123;</span><br><span class="line">	arr.push(&#123;number: i&#125;)</span><br><span class="line">&#125;</span><br><span class="line">db.&lt;collections&gt;.insert(arr)</span><br></pre></td></tr></table></figure>

<p>不要在for循环里进行插入操作，那样效率会很低。</p>
<h3 id="2-查找文档"><a href="#2-查找文档" class="headerlink" title="2. 查找文档"></a>2. 查找文档</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.find(&#123;number: 5000&#125;) </span><br><span class="line">db.&lt;collections&gt;.find(&#123;number: &#123;$gt: 5000&#125;&#125;) //gt: greater than 查找数额大于5000的文档</span><br><span class="line">db.&lt;collections&gt;.find(&#123;number: &#123;$gte: 5000&#125;&#125;) // &gt;=5000</span><br><span class="line">db.&lt;collections&gt;.find(&#123;number: &#123;$lt: 5000&#125;&#125;) // &lt;5000  lt: less than</span><br><span class="line">db.&lt;collections&gt;.find(&#123;number: &#123;$gt: 5000, $lt: 8000&#125;&#125;) //  5000&lt;num&lt;8000</span><br><span class="line">//查找小于5000或大于8000</span><br><span class="line">db.&lt;collections&gt;.find(&#123;$or:[&#123;number:&#123;$lt: 5000&#125;&#125;,&#123;number: &#123;$gt: 8000&#125;&#125;]&#125;)</span><br><span class="line">db.&lt;collections&gt;.find(&#123;&#125;).limit(10) //查询前10条</span><br><span class="line">db.&lt;collections&gt;.find(&#123;&#125;).skip(10).limit(10) // 查询前11-20条 skip：跳过 </span><br></pre></td></tr></table></figure>



<h3 id="3-更改文档"><a href="#3-更改文档" class="headerlink" title="3. 更改文档"></a>3. 更改文档</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//将小于5000的文档number属性值在原来的基础上增加400</span><br><span class="line">db.&lt;collections&gt;.updateMany(&#123;number:&#123;$lt:5000&#125;&#125;, &#123;$inc:&#123;number: 400&#125;&#125;)</span><br><span class="line">//减400为-400</span><br></pre></td></tr></table></figure>



<h3 id="4-排序"><a href="#4-排序" class="headerlink" title="4. 排序"></a>4. 排序</h3><p>默认的数据库排序是按照_id升序排列，有时候我们想按照自己的方式进行排序，比如我想按照number的大小进行排序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.find(&#123;&#125;).sort(&#123;number: 1&#125;) //-1便是降序</span><br><span class="line">db.&lt;collections&gt;.find(&#123;&#125;).sort(&#123;number: 1, num1: 1&#125;) //可以通过多个属性进行排序，但前提是第一个属性排序过程中如果有相同的，才会按照第二个属性决定谁在前谁在后</span><br></pre></td></tr></table></figure>



<h3 id="5-投影"><a href="#5-投影" class="headerlink" title="5. 投影"></a>5. 投影</h3><p>在查找文档式，想要只显示指定的某一或某些属性，就需要用到投影：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections&gt;.find(&#123;&#125;, &#123;number:1&#125;) //此时所有文档只会显示number属性</span><br></pre></td></tr></table></figure>



<h2 id="六、文档之间的关系"><a href="#六、文档之间的关系" class="headerlink" title="六、文档之间的关系"></a>六、文档之间的关系</h2><p>文档之间点的关系可以是一对一、一对多、多对一或者多对多，一对一用的比较少，最主要的是一对多，即把一个文档的id值作为另外一个集合内多个文档的属性值，在查寻时可以根据id查找符合条件的文档。</p>
<p>多对多即一个集合内多个文档的id可以作为另一个集合的某个文档的属性值，此时用数组存储。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.&lt;collections1&gt;.insert(&#123;name: &quot;张三&quot;&#125;)</span><br><span class="line"></span><br><span class="line">db.&lt;collections2&gt;.insert([&#123;name: &quot;李四&quot;, user_id: 张三的id&#125;, &#123;name: &quot;王五&quot;, user_id: 张三的id&#125;])</span><br><span class="line">//查询</span><br><span class="line">var id = db.&lt;collections1&gt;.findOne(&#123;name: &quot;张三&quot;&#125;)._id </span><br><span class="line">db.&lt;collections2&gt;.find(&#123;user_id: id&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="七、mongoose基本介绍"><a href="#七、mongoose基本介绍" class="headerlink" title="七、mongoose基本介绍"></a>七、mongoose基本介绍</h2><p>mongoose是对node环境下的MongoDB数据库操作的封装，将数据库内的数据转换成js对象以供使用。</p>
<h3 id="1-下载安装-1"><a href="#1-下载安装-1" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i mongoose --save</span><br></pre></td></tr></table></figure>

<!-- more -->

<h3 id="2-连接数据库"><a href="#2-连接数据库" class="headerlink" title="2. 连接数据库"></a>2. 连接数据库</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&#x27;mongodb://localhost/test&#x27;</span>, &#123;<span class="attr">useNewUrlParser</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">mongoose.connection.once(<span class="string">&#x27;open&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//连接状态监听</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;数据库已连接&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="八、Model方法CRUD"><a href="#八、Model方法CRUD" class="headerlink" title="八、Model方法CRUD"></a>八、Model方法CRUD</h2><h3 id="1-插入文档"><a href="#1-插入文档" class="headerlink" title="1. 插入文档"></a>1. 插入文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</span><br><span class="line"><span class="comment">//创建schema对象</span></span><br><span class="line"><span class="keyword">var</span> stuSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    name: <span class="built_in">String</span>,</span><br><span class="line">    age: <span class="built_in">Number</span>,</span><br><span class="line">    gender: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">&quot;female&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    address: <span class="built_in">String</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//通过schema创建model</span></span><br><span class="line"><span class="keyword">var</span> stuModel = mongoose.model(<span class="string">&#x27;students&#x27;</span>, stuSchema);</span><br><span class="line"><span class="comment">//向数据库插入文档</span></span><br><span class="line">stuModel.create(&#123; <span class="comment">//插入多个传个数组</span></span><br><span class="line">    name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    gender: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    address: <span class="string">&quot;一班&quot;</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;插入成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="2-查找文档-1"><a href="#2-查找文档-1" class="headerlink" title="2. 查找文档"></a>2. 查找文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stuModel.find(&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;, <span class="string">&#x27;投影&#x27;</span>, &#123;查询条件(skip、limit)&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在mongoose还提供了通过id查找文档的方法: <code>stuModel.findById()</code></p>
<h3 id="3-修改文档"><a href="#3-修改文档" class="headerlink" title="3. 修改文档"></a>3. 修改文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stuModel.update(&#123;<span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>&#125;, &#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>: <span class="number">20</span>&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="4-删除文档"><a href="#4-删除文档" class="headerlink" title="4. 删除文档"></a>4. 删除文档</h3><p>删除文档也与在MongoDB中的操作几乎一致只不过最后一个参数为会回调函数。</p>
<h3 id="5-统计文档数量"><a href="#5-统计文档数量" class="headerlink" title="5. 统计文档数量"></a>5. 统计文档数量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stuModel.count(&#123;&#125;, [callback])</span><br></pre></td></tr></table></figure>



<h2 id="九、Document对象方法CRUD"><a href="#九、Document对象方法CRUD" class="headerlink" title="九、Document对象方法CRUD"></a>九、Document对象方法CRUD</h2><h3 id="1-创建document"><a href="#1-创建document" class="headerlink" title="1. 创建document"></a>1. 创建document</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> stuModel(&#123;&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="2-保存"><a href="#2-保存" class="headerlink" title="2. 保存"></a>2. 保存</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stu.save([callback])</span><br></pre></td></tr></table></figure>



<h3 id="3-修改"><a href="#3-修改" class="headerlink" title="3. 修改"></a>3. 修改</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stuModel.findOne(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">    doc.age = <span class="number">20</span>;</span><br><span class="line">    doc.save();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="4-删除与转换"><a href="#4-删除与转换" class="headerlink" title="4. 删除与转换"></a>4. 删除与转换</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">stuModel.findOne(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, doc</span>) </span>&#123;</span><br><span class="line">   doc.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">&#x27;删除成功~&#x27;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">   <span class="keyword">var</span> doc = doc.toJSON(); </span><br><span class="line">   <span class="keyword">var</span> doc1 = doc.toObject();</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>node基础</title>
    <url>/archives/b4da5a3.html</url>
    <content><![CDATA[<h2 id="node介绍"><a href="#node介绍" class="headerlink" title="node介绍"></a>node介绍</h2><h2 id="一、node介绍"><a href="#一、node介绍" class="headerlink" title="一、node介绍"></a>一、node介绍</h2><p>随着计算机技术的快速发展，谷歌推出了 <strong>V8</strong> 引擎 ，为 <code>node.js</code> 的诞生奠定了基础，而node在后端的应用则是让前端工程师开始走向全栈，那么node到底是什么？node.js既不是一种语言，也不是一种基于JS的框架，而是一种由C++搭建的 <strong>运行环境</strong> ，只不过在这种环境下可以运行JavaScript代码，从而让从事前端的程序员也能写后端代码，完成中小型项目，进而实现全栈。</p>
<a id="more"></a>

<h2 id="二、node基础语法"><a href="#二、node基础语法" class="headerlink" title="二、node基础语法"></a>二、node基础语法</h2><h3 id="1-node安装"><a href="#1-node安装" class="headerlink" title="1. node安装"></a>1. node安装</h3><p>首先在官网进行下载 <a href="https://nodejs.org/en/">node</a> ,官网提供了两种版本，分别为奇数版和偶数版，建议下载偶数版，因为 <strong>偶数版</strong> 是稳定版，也就是长期支持维护的版本，使用起来更加安全。下载完成后，安装一路默认即可，因为新版node在安装的时候会默认添加到 <strong>环境变量</strong> 中，所以不需要重新配置。打开cmd后输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>即可查询当前node版本，来判断是否安装成功。</p>
<h3 id="2-输出hello-world"><a href="#2-输出hello-world" class="headerlink" title="2. 输出hello world"></a>2. 输出hello world</h3><p>在任意的路径下创建一个js文件，写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure>



<p>保存后，打开 <strong>该路径下</strong> 的cmd，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node XXX.js</span><br></pre></td></tr></table></figure>



<p>得到输出结果 <code>hello world</code> 。</p>
<h3 id="3-npm介绍"><a href="#3-npm介绍" class="headerlink" title="3. npm介绍"></a>3. npm介绍</h3><p>由于node中没有模块化，所以npm作为一种包管理工具来辅佐node，就如同软件仓库/管家的作用一样，帮你把各种软件收纳存储起来，以方便下载。想要下载所需的包时只需在放置包位置的路径下在cmd输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i XXX包名 -s //-s安装到依赖环境中</span><br><span class="line">npm r xxx包名 //删除</span><br></pre></td></tr></table></figure>



<h4 id="3-1-package-json介绍"><a href="#3-1-package-json介绍" class="headerlink" title="3.1 package.json介绍"></a>3.1 package.json介绍</h4><p>当你下载一个包后，打开这个包你会发现里面有一个 <code>package.json</code> 文件，这其实就是这个包的说明文件，里面是关于这个包的一些配置文件，所以在写node的时候要遵循模块化的规则，先定义一个 <code>package.json</code> 文件，写入基本信息。关于-s安装到依赖环境，在 <code>package.json</code> 文件中会显示依赖和你所依赖的包的版本，当你下载别人的包时，只需在这个包中打开cmd输入 <code>npm i</code>  ，就能将其所需要的包都下载下来，节省操作空间。</p>
<h4 id="3-2-cnpm介绍"><a href="#3-2-cnpm介绍" class="headerlink" title="3.2 cnpm介绍"></a>3.2 cnpm介绍</h4><p>由于npm所在服务器位于国外，所以有时会遇到被墙的问题，而且当下载的包比较大时，由于下载速度较慢，会造成等待时间较长的问题，所以可以在 <a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">淘宝镜像</a> 中下载 <font color="red">cnpm</font> ,安装包名时将 npm替换成 <font color="red">cnpm</font> 就能解决上述问题。</p>
<h3 id="4-模块化系统"><a href="#4-模块化系统" class="headerlink" title="4. 模块化系统"></a>4. 模块化系统</h3><p>node的模块化系统分为三部分：<em>核心模块</em>、<em>导入模块</em>、<em>自定义模块</em>。</p>
<p>核心模块就是node中附带的模块，是操作node的核心，导入模块便是从npm下载下来的模块，自定义模块就是自己创建写入的js文件。</p>
<h4 id="4-1-核心模块"><a href="#4-1-核心模块" class="headerlink" title="4.1 核心模块"></a>4.1 核心模块</h4><p>node中的核心模块有很多，如 <code>http</code> 模块、<code>fs</code> 模块等，先创建一个js文件，想要导入他们直接写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>); </span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="4-2-导入模块"><a href="#4-2-导入模块" class="headerlink" title="4.2 导入模块"></a>4.2 导入模块</h4><p>使用导入模块的时候必须现在cmd中用c/npm下载该模块，然后导入使用，比如</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i math -s</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&#x27;math&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h4 id="4-3-自定义模块"><a href="#4-3-自定义模块" class="headerlink" title="4.3 自定义模块"></a>4.3 自定义模块</h4><p>当我想要自己写一个计算加法和乘法的模块后，创建cal.js文件后写入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> a+b;			<span class="comment">// exports表示暴露，模块就像写在在函数里一样，里面定义的变量要将其暴露出来</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.mul = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>然后在另一个文件中导入使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cal = <span class="built_in">require</span>(<span class="string">&#x27;./cal.js&#x27;</span>); <span class="comment">//注意导入自定义模块的路径必须加上./</span></span><br><span class="line"><span class="keyword">var</span> ret = cal.add(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ret)</span><br><span class="line"><span class="comment">//8</span></span><br></pre></td></tr></table></figure>



<h4 id="4-4-关于自定义文件的暴露问题"><a href="#4-4-关于自定义文件的暴露问题" class="headerlink" title="4.4 关于自定义文件的暴露问题"></a>4.4 关于自定义文件的暴露问题</h4><p>有两种方式，一种是 <code>exports.变量名</code> ，另一种是 <code>moudule.exports = &#123;&#125;</code> ,前者其实是后者的一个方法，他们俩都存储了相同的地址值，指向同一个对象。只是为了方便快捷，后者导出的是整个模块函数对象，而前者只是将对应的模块函数导出。</p>
<h2 id="三、核心模块http"><a href="#三、核心模块http" class="headerlink" title="三、核心模块http"></a>三、核心模块http</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><p>​    <code>http</code>核心模块主要用于创建和操作服务器，接受请求时可以传入请求和响应两个参数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>); <span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.creatServer(); <span class="comment">//创建一个服务器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对服务器进行事件监听</span></span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123; <span class="comment">//req:request(请求) res: response(响应)</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;text/plain; utf-8&#x27;</span>); <span class="comment">//设置请求头，防止相应界面乱码</span></span><br><span class="line">	res.end(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果想要对服务器正常访问，还要对服务器绑定端口号，计算机中每个进程都会对应一个端口号，浏览器的默认端口号为 <strong>80</strong> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.listen(<span class="number">80</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Server is running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-url的基本认识"><a href="#2-url的基本认识" class="headerlink" title="2. url的基本认识"></a>2. url的基本认识</h3><p>​    url(统一资源定位符)也就是在浏览器地址栏的内容，在对服务器进行事件监听时当用户输入url请求时可以获取到，并对其进行操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url=req.url;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">url===<span class="string">&#x27;/&#x27;</span></span>)</span>&#123;</span><br><span class="line">        res.end(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>



<h3 id="3-url模块"><a href="#3-url模块" class="headerlink" title="3. url模块"></a>3. url模块</h3><p>node中也有url模块，并且是附带的，<font color="red">无需从npm中下载 </font> </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>url模块可以对用户请求的url数据进行操作，比如将其解析为一个对象，里面存着url里路径、内容等，可以通过输出url.parse(req.url, true)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">	url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>然后url.path就是请求路径，url.query是用户通过get方式提交的信息。</p>
<h2 id="四、核心模块fs"><a href="#四、核心模块fs" class="headerlink" title="四、核心模块fs"></a>四、核心模块fs</h2><h3 id="1-基本语法-1"><a href="#1-基本语法-1" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><p>​    fs是node中的 <strong>文件操作系统</strong> ，主要用来读取和写入文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">//导入模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异步读取文件</span></span><br><span class="line">fs.readFile(<span class="string">&#x27;./xxx&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123; <span class="comment">//err 表示读取出错 data表示读取成功的数据</span></span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;读取错误&#x27;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>写入文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异步写入文件</span></span><br><span class="line">fs.writeFile(<span class="string">&#x27;./写入文件路径&#x27;</span>, <span class="string">&#x27;写入内容&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">        res.end(<span class="string">&#x27;erro&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>同步写入文件的话就是没有回调函数，并在fs.readFile后面加上了 <code>Sync</code> 。</p>
<h2 id="五、模拟Apache"><a href="#五、模拟Apache" class="headerlink" title="五、模拟Apache"></a>五、模拟Apache</h2><p>根据以上两种核心模块我们可以模拟出 <font color="red">Apache</font> 服务器的基本行为。</p>
<p>首先导入两种核心模块,然后创建服务器，通过设定好服务器文件基本路径并将请求的url赋值给filePath以实现灵活读取文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&#x27;requeset&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> url = req.url;</span><br><span class="line">    <span class="keyword">var</span> dir = <span class="string">&#x27;服务器文件路径&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> filePath = <span class="string">&#x27;&#x27;</span>; <span class="comment">//初始界面的路径</span></span><br><span class="line">    <span class="keyword">if</span> (url !== <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        filePath = url;</span><br><span class="line">    &#125;</span><br><span class="line">    fs.readFile(dir+filePath, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">err</span>)</span> &#123;</span><br><span class="line">            res.end(<span class="number">404</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res.end(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">80</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;Server is running...&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="六、模板引擎"><a href="#六、模板引擎" class="headerlink" title="六、模板引擎"></a>六、模板引擎</h2><p>模板引擎不单单能在 <code>Ajax</code> 里使用，也可以在node中导入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br></pre></td></tr></table></figure>



<p>将想要的渲染的页面写好后，可以使用 <code>render()</code> 方法进行渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">template.render(<span class="string">&#x27;渲染文件路径&#x27;</span>, &#123;&#125;);</span><br></pre></td></tr></table></figure>

<p> 想要对指定文件进行渲染，可以通过 <strong>fs模块</strong> 读取文件进行渲染</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fs.readFile(<span class="string">&#x27;xxx&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&#x27;文件读取失败&#x27;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> ret = template.render(data.toString(),&#123;&#125; ); <span class="comment">//读的是html文件时许需要转成字符串</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="七、补充"><a href="#七、补充" class="headerlink" title="七、补充"></a>七、补充</h2><p>创建操作服务器的时候，有简写操作</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;); </span><br><span class="line">http.creat<span class="constructor">Server(<span class="params">funciton</span> (<span class="params">req</span>,<span class="params">res</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h2 id="八、express-安装"><a href="#八、express-安装" class="headerlink" title="八、express 安装"></a>八、express 安装</h2><p>node也有许多框架，如express、koa等，使用框架可以大大减少我们的代码量，从而提高开发效率，这里只介绍 <strong>express</strong> 框架</p>
<p>首先安装在c/npm中安装express，安装成功后可以在node_moudules文件中查看是否存在</p>
<h2 id="九、express基本使用"><a href="#九、express基本使用" class="headerlink" title="九、express基本使用"></a>九、express基本使用</h2><p>首先我们用express创建一个服务器：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br></pre></td></tr></table></figure>



<h3 id="1-提供静态资源"><a href="#1-提供静态资源" class="headerlink" title="1. 提供静态资源"></a>1. 提供静态资源</h3><p>express提供了一种方法，可以让你的静态资源得以访问，使用express.static内置中间件函数可以设置提供静态资源的路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;设置请求的url地址&#x27;</span>, express.static(<span class="string">&#x27;./静态资源路径&#x27;</span>));</span><br></pre></td></tr></table></figure>



<p>并且在想要渲染的文件中所引入的文件路径可以直接写入，例如我想要渲染的html文件引入了public文件夹中的css文件夹的main.css文件，那么此时我就可以在 <code>link</code> 标签中的href写入 <code>/public/css/main.css</code>，不论你想要渲染的文件在你的包中哪个文件夹里，都可以直接引入。</p>
<h3 id="2-express使用模板引擎"><a href="#2-express使用模板引擎" class="headerlink" title="2. express使用模板引擎"></a>2. express使用模板引擎</h3><p>express想要使用模板引擎需要用npm下载两个包：<em>art-template</em>和<em>express-art-template</em>。</p>
<p>通过<code>app.engine()</code>可以实现被渲染文件的后缀，比如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.engine(<span class="string">&#x27;html&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br></pre></td></tr></table></figure>



<p>此时，渲染文件类型将被指定为.html文件。</p>
<h3 id="3-关于get和post请求"><a href="#3-关于get和post请求" class="headerlink" title="3. 关于get和post请求"></a>3. 关于get和post请求</h3><p><strong>get</strong> 和 <strong>post</strong>请求区别在与get请求中传递的参数值会显示在地址栏中，而且长度有限，post请求则不会在地址栏中显示，并且长度不受限制，相对来讲更加安全，但get请求能减少web服务器的负担，因此两者都不可或缺。</p>
<h4 id="3-1-get请求"><a href="#3-1-get请求" class="headerlink" title="3.1 get请求"></a>3.1 get请求</h4><p>get请求在express的语法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">express().get(<span class="string">&#x27;./请求地址&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="3-2-post请求"><a href="#3-2-post请求" class="headerlink" title="3.2 post请求"></a>3.2 post请求</h4><p>post请求需要中间件才能完成：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i body-parser -s</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在js文件中引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser, urlencoded(&#123;<span class="attr">extend</span>: <span class="literal">false</span>&#125;));</span><br></pre></td></tr></table></figure>



<h4 id="3-3-express路由"><a href="#3-3-express路由" class="headerlink" title="3.3 express路由"></a>3.3 express路由</h4><p>express也为路由提供了方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> router = express.Router();</span><br></pre></td></tr></table></figure>



<p>此时对get/post请求处理时直接：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.get();</span><br><span class="line">router.post();</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python图书管理系统</title>
    <url>/archives/5158de64.html</url>
    <content><![CDATA[<h1 id="图书管理系统"><a href="#图书管理系统" class="headerlink" title="图书管理系统"></a>图书管理系统</h1><p>本程序是用python语言编写，主要涉及到python中库的调用、对数组和函数的灵活运用等知识，是一个简单的程序设计。功能有用户页面和后台管理员系统。</p>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">books = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;红楼梦&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;	曹雪芹&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;19.9&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;西游记&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;	吴承恩&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;29.9&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;三国演义&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;罗贯中&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;39.9&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;水浒传&#x27;</span>, <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;	施耐庵&#x27;</span>, <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;49.9&#x27;</span>&#125;,</span><br><span class="line">         ]  <span class="comment"># 图书数据</span></span><br><span class="line"></span><br><span class="line">users = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;admin1&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;admin2&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;administrators&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>: <span class="string">&#x27;123&#x27;</span>&#125;]  <span class="comment"># 默认用户数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主菜单</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">&#x27;    *****欢迎来到图书管理系统***** &#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">&#x27;    请输入你想要进行的操作：&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    1: 注册新用户：&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    2. 使用已注册的账号进行登陆：&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    3. 退出本系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign_up</span>():</span></span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的用户名：&#x27;</span>)</span><br><span class="line">    user_passwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line">    user_passwd2 = <span class="built_in">input</span>(<span class="string">&#x27;请确认您的密码：&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_passwd == user_passwd2:</span><br><span class="line">        user = &#123;<span class="string">&#x27;name&#x27;</span>: user_name, <span class="string">&#x27;passwd&#x27;</span>: user_passwd&#125;</span><br><span class="line">        users.append(user)</span><br><span class="line">        print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">f&#x27;恭喜用户<span class="subst">&#123;user_name&#125;</span>,您已注册成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;两次密码不一致，请重新输入&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆页面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的用户名：&#x27;</span>)</span><br><span class="line">    user_passwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入您的密码：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">if</span> user_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> user_passwd == i[<span class="string">&#x27;passwd&#x27;</span>]:</span><br><span class="line">                print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">1</span>)</span><br><span class="line">                print(<span class="string">&#x27;登陆成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> user_name</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;密码输入错误！&#x27;</span>)</span><br><span class="line">                login()</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该用户的信息！&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;请重试。&#x27;</span>)</span><br><span class="line">        login()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对用户与管理者的判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">while_user</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">while</span> name:</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">&#x27;administrators&#x27;</span>:  <span class="comment"># 判断是否为管理者</span></span><br><span class="line">            manger()  <span class="comment"># 管理者页面</span></span><br><span class="line">            manger_n = <span class="built_in">input</span>()</span><br><span class="line">            <span class="keyword">if</span> manger_n == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                del_user()</span><br><span class="line">            <span class="keyword">elif</span> manger_n == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                edit_user()</span><br><span class="line">            <span class="keyword">elif</span> manger_n == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                look_user()</span><br><span class="line">            <span class="keyword">elif</span> manger_n == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                look_users()</span><br><span class="line">            <span class="keyword">elif</span> manger_n == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;您的输入有误！&#x27;</span>)</span><br><span class="line">                print(<span class="string">&#x27;请再次输入：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            user_menu(name)  <span class="comment"># 普通用户页面</span></span><br><span class="line">            user_n = <span class="built_in">input</span>()</span><br><span class="line">            <span class="keyword">if</span> user_n == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                add_book()</span><br><span class="line">            <span class="keyword">elif</span> user_n == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                del_book()</span><br><span class="line">            <span class="keyword">elif</span> user_n == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                edit_book()</span><br><span class="line">            <span class="keyword">elif</span> user_n == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                look_book()</span><br><span class="line">            <span class="keyword">elif</span> user_n == <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">                look_books()</span><br><span class="line">            <span class="keyword">elif</span> user_n == <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">                print(<span class="string">&#x27;您已退出系统！&#x27;</span>)</span><br><span class="line">                sys.exit(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">&#x27;您的输入有误！&#x27;</span>)</span><br><span class="line">                print(<span class="string">&#x27;请再次输入：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理者界面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">manger</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">&#x27;    ***** 欢迎来到系统后台 ***** &#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">&#x27;请输入你想要进行的操作：&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;1. 删除一个用户&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;2. 修改用户密码&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;3. 查看一个用户信息&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;4. 查看全部用户信息&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;5. 退出后台系统&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_user</span>():</span></span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的用户名：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">if</span> user_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">del</span> users[index]</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">f&#x27;<span class="subst">&#123;user_name&#125;</span>的用户信息已被删除！&#x27;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该用户的信息！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改用户密码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_user</span>():</span></span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改密码的用户名：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">if</span> user_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            new_user_passwd = <span class="built_in">input</span>(<span class="string">&#x27;请输入修改后的密码：&#x27;</span>)</span><br><span class="line">            i[<span class="string">&#x27;passwd&#x27;</span>]=new_user_passwd</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">f&#x27;已对用户<span class="subst">&#123;user_name&#125;</span>重新修改了密码！&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该用户的信息！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">look_user</span>():</span></span><br><span class="line">    user_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查看的用户名：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        <span class="keyword">if</span> user_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&#x27;用户名\t密码\t&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125;\t\t&#123;&#125;\t&#x27;</span> .<span class="built_in">format</span>(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;passwd&#x27;</span>]))</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该用户的信息！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全部用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">look_users</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;用户名\t密码\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> users:</span><br><span class="line">        print(<span class="string">&#x27;&#123;&#125;\t\t&#123;&#125;\t&#x27;</span> .<span class="built_in">format</span>(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;passwd&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户界面</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_menu</span>(<span class="params">self</span>):</span></span><br><span class="line">    print(<span class="string">&#x27;*&#x27;</span> * <span class="number">40</span>)</span><br><span class="line">    print(<span class="string">&#x27;    请输入你想要进行的操作：&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    1. 添加书籍&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    2. 删除书籍&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    3. 修改书籍信息&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    4. 查询单本书籍信息&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    5. 查询所有书籍信息&#x27;</span>)</span><br><span class="line">    print(<span class="string">&#x27;    6. 退出&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_book</span>():</span></span><br><span class="line">    book_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要添加书籍的名字：&#x27;</span>)</span><br><span class="line">    book_author = <span class="built_in">input</span>(<span class="string">&#x27;请输入要添加书籍的作者：&#x27;</span>)</span><br><span class="line">    book_price = <span class="built_in">input</span>(<span class="string">&#x27;请输入要添加书籍的价格：&#x27;</span>)</span><br><span class="line">    book = &#123;<span class="string">&#x27;name&#x27;</span>: book_name, <span class="string">&#x27;author&#x27;</span>: book_author, <span class="string">&#x27;price&#x27;</span>: book_price&#125;</span><br><span class="line">    books.append(book)</span><br><span class="line">    print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;book_name&#125;</span>的书籍信息已成功添加！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_book</span>():</span></span><br><span class="line">    book_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要删除书籍的名字：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> books:</span><br><span class="line">        <span class="keyword">if</span> book_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">del</span> books[index]</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">f&#x27;<span class="subst">&#123;book_name&#125;</span>的书籍信息已成功删除！&#x27;</span>)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该书籍的信息！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_book</span>():</span></span><br><span class="line">    book_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要修改书籍的名字：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> books:</span><br><span class="line">        <span class="keyword">if</span> book_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            new_book_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入修改后书籍的名字：&#x27;</span>)</span><br><span class="line">            new_book_author = <span class="built_in">input</span>(<span class="string">&#x27;请输入修改后书籍的作者：&#x27;</span>)</span><br><span class="line">            new_book_price = <span class="built_in">input</span>(<span class="string">&#x27;请输入修改后书籍的价格：&#x27;</span>)</span><br><span class="line">            i[<span class="string">&#x27;name&#x27;</span>]=new_book_name</span><br><span class="line">            i[<span class="string">&#x27;author&#x27;</span>]=new_book_author</span><br><span class="line">            i[<span class="string">&#x27;price&#x27;</span>]=new_book_price</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">f&#x27;<span class="subst">&#123;book_name&#125;</span>的书籍信息已完成修改！&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该书籍的信息！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一本书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">look_book</span>():</span></span><br><span class="line">    book_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要查看书籍的名字：&#x27;</span>)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> books:</span><br><span class="line">        <span class="keyword">if</span> book_name == i[<span class="string">&#x27;name&#x27;</span>]:</span><br><span class="line">            count = <span class="number">1</span></span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&#x27;书名\t\t作者\t价格\t&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;[&#123;&#125;]\t&#123;&#125;\t&#123;&#125;\t&#x27;</span>.<span class="built_in">format</span>(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;author&#x27;</span>], i[<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">&#x27;未查到该书籍的信息！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看全部书籍</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">look_books</span>():</span></span><br><span class="line">    print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">&#x27;书名\t\t作者\t价格\t&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> books:</span><br><span class="line">        print(<span class="string">&#x27;[&#123;&#125;]\t&#123;&#125;\t&#123;&#125;\t&#x27;</span>.<span class="built_in">format</span>(i[<span class="string">&#x27;name&#x27;</span>], i[<span class="string">&#x27;author&#x27;</span>], i[<span class="string">&#x27;price&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 循环菜单主页面</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        menu()  <span class="comment"># 主菜单页面</span></span><br><span class="line">        menu_n = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> menu_n == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            sign_up()</span><br><span class="line">        <span class="keyword">elif</span> menu_n == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            name = login()  <span class="comment"># 用户登陆后返回值name</span></span><br><span class="line"></span><br><span class="line">            while_user(name)  <span class="comment"># 用户与管理者判断</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> menu_n == <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">            print(<span class="string">&#x27;请稍等。。。&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">&#x27;您已退出管理者功能！&#x27;</span>)</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;您的输入有误！&#x27;</span>)</span><br><span class="line">            print(<span class="string">&#x27;请再次输入：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用主函数</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>原生JS实现无缝轮播图</title>
    <url>/archives/75b91cd4.html</url>
    <content><![CDATA[<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>现在不论是pc端还是移动端，里面很重要的一个特效就是<strong>轮播图</strong>，可以说是必不可少的。下面是html和css代码：</p>
<a id="more"></a>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line">            width: 490px;</span><br><span class="line">            height: 170px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            padding: 5px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.inner</span>&#123;</span></span><br><span class="line">            width: 490px;</span><br><span class="line">            height: 170px;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> ul&#123;</span><br><span class="line">            width: 600%;/*无缝的关键是在第五张图后面放上第一张图，实际有六张图*/</span><br><span class="line">            list-style: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">            left:0;</span><br><span class="line">        &#125;</span><br><span class="line">        li&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">        .square&#123;</span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 8px;</span><br><span class="line">            right: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .square span&#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 16px;</span><br><span class="line">            height: 16px;</span><br><span class="line">            line-height: 16px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            background-color: white;</span><br><span class="line">        &#125;</span><br><span class="line">        .square .cur&#123;</span><br><span class="line">            background-color: orange;</span><br><span class="line">            color: #ccc;</span><br><span class="line">        &#125;</span><br><span class="line">        .arrow&#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        .arrow span&#123;</span><br><span class="line">            width: 40px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            position: absolute;</span><br><span class="line">            margin-top: -20px;</span><br><span class="line">            background-color: rgb(0,0,0);</span><br><span class="line">            color: white;</span><br><span class="line">            font-family: &#x27;黑体&#x27;;</span><br><span class="line">            font-size: 30px;</span><br><span class="line">            border: 1px solid #fff;</span><br><span class="line">            opacity: 0.3;</span><br><span class="line">        &#125;</span><br><span class="line">        .arrow .left&#123;</span><br><span class="line">            left: 0;</span><br><span class="line">            top: 50%;</span><br><span class="line">        &#125;</span><br><span class="line">        .arrow .right&#123;</span><br><span class="line">            right: 0;</span><br><span class="line">            top: 50%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/02.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/03.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/04.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/05.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cur&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span> <span class="attr">id</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span></span><br><span class="line">                &lt;span class=&quot;left&quot;&gt;&lt;&lt;/span&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果图如下：<img src="/images/lunbotu.png"></p>
<h1 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h1><p>接下来就是用JavaScript代码来操作<strong>ul</strong>和右下角的小方块的<strong>高亮</strong>，主要利用<em>定时器</em>使ul的移动与小方块的高亮进行同步：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    	<span class="comment">//获取事件源及相关元素</span></span><br><span class="line">        <span class="keyword">var</span> inner=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;inner&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> ul=inner.children[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> spanArr=inner.children[<span class="number">1</span>].children;</span><br><span class="line">        <span class="keyword">var</span> innerWidth=inner.offsetWidth;</span><br><span class="line">        <span class="keyword">var</span> liNew=ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line">        ul.appendChild(liNew);</span><br><span class="line">        <span class="keyword">var</span> ol=inner.children[<span class="number">0</span>].children;</span><br><span class="line">        <span class="keyword">var</span> key=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> square=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> box=<span class="built_in">document</span>.getElementById(<span class="string">&#x27;arrow&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> arrow=box.children;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点亮盒子（底下的小方块）</span></span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;spanArr.length;i++</span>)</span>&#123;</span><br><span class="line">            spanArr[i].index=i;</span><br><span class="line">            spanArr[i].onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">//排他思想</span></span><br><span class="line">                <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> j=<span class="number">0</span>;j&lt;spanArr.length;j++</span>)</span>&#123;</span><br><span class="line">                    spanArr[j].className=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.className=<span class="string">&#x27;cur&#x27;</span>;</span><br><span class="line">                key=square=<span class="built_in">this</span>.index;</span><br><span class="line">                animate(ul,-<span class="built_in">this</span>.index*innerWidth);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//square ul的定时器</span></span><br><span class="line">        timer=<span class="built_in">setInterval</span>(fn,<span class="number">1000</span>);</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            key++</span><br><span class="line">            <span class="keyword">if</span> (key&gt;spanArr.length) &#123;</span><br><span class="line">                ul.style.left=<span class="number">0</span>;</span><br><span class="line">                key=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            animate(ul,-innerWidth*key);</span><br><span class="line">            square++</span><br><span class="line">            <span class="keyword">if</span> (square&gt;spanArr.length-<span class="number">1</span>) &#123;</span><br><span class="line">                square=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">for</span>(<span class="params">i=<span class="number">0</span>;i&lt;spanArr.length;i++</span>)</span>&#123;</span><br><span class="line">                spanArr[i].className=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            spanArr[square].className=<span class="string">&#x27;cur&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//鼠标移入移出</span></span><br><span class="line">        inner.onmouseover=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            box.style.display=<span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        inner.onmouseout=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            box.style.display=<span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">            timer=<span class="built_in">setInterval</span>(fn,<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//左右切换</span></span><br><span class="line">        arrow[<span class="number">0</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            key--</span><br><span class="line">            <span class="keyword">if</span> (key&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                ul.style.left=-innerWidth*(spanArr.length)+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                key=spanArr.length-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            animate(ul,-innerWidth*key);</span><br><span class="line">            square--</span><br><span class="line">            <span class="keyword">if</span> (square&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                square=spanArr.length-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">for</span>(<span class="params">i=<span class="number">0</span>;i&lt;spanArr.length;i++</span>)</span>&#123;</span><br><span class="line">                spanArr[i].className=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            spanArr[square].className=<span class="string">&#x27;cur&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arrow[<span class="number">1</span>].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//已封装的图片动画</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">ele,target</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(ele.timer);</span><br><span class="line">            ele.timer=<span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> speed=target&gt;ele.offsetLeft?<span class="number">10</span>:-<span class="number">10</span>;</span><br><span class="line">                <span class="keyword">var</span> val=target-ele.offsetLeft;</span><br><span class="line">                ele.style.left=ele.offsetLeft+speed+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">Math</span>.abs(val)&lt;=<span class="built_in">Math</span>.abs(speed))&#123;</span><br><span class="line">                    ele.style.left=target+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(ele.timer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,<span class="number">10</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>轮播图</tag>
      </tags>
  </entry>
</search>
